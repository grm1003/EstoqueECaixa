@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "Loja",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1355179737 { 
   	label=Produto
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Produto1355179737[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Produto</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   QuantStock: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   custoProd: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nome: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   preco_unitario: float [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1531808526 { 
   	label=Usuario
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Usuario1531808526[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Usuario</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   email: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isAdm: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   senha: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ logarUsuario(senha: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1908276379 { 
   	label=Pedido
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Pedido1908276379[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Pedido</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   idUsuario: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   produtos: ArrayList&lt;Produto&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   total: float [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- printaProdutos(): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_2374170 { 
   	label=Loja
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Loja2374170[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Loja</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   despesas: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   lucro: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   numVendas: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   pedidos: ArrayList&lt;Pedido&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   produtos: ArrayList&lt;Produto&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   totalVendas: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   usuarios: ArrayList&lt;Usuario&gt; [0..*]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Loja2374170 -> Pedido1908276379[label="pedidos
[0..*]"];
Loja2374170 -> Produto1355179737[label="produtos
[0..*]"];
Loja2374170 -> Usuario1531808526[label="usuarios
[0..*]"];
Pedido1908276379 -> Produto1355179737[label="produtos
[0..*]"];
    
}
@enduml